<?xml version="1.0" encoding="utf-8"?>

<!--

    ADOBE SYSTEMS INCORPORATED
    Copyright 2008 Adobe Systems Incorporated
    All Rights Reserved.

    NOTICE: Adobe permits you to use, modify, and distribute this file
    in accordance with the terms of the license agreement accompanying it.

-->

<!--- The default skin class for a Spark SkinnableContainer container.  

     @see spark.components.SkinnableContainer
        
      @langversion 3.0
      @playerversion Flash 10
      @playerversion AIR 1.5
      @productversion Flex 4
-->
<s:Skin xmlns:fx="http://ns.adobe.com/mxml/2009" xmlns:s="library://ns.adobe.com/flex/spark" 
    xmlns:fb="http://ns.adobe.com/flashbuilder/2009" alpha.disabled="0.5">
	<fx:Metadata>[HostComponent("shinydesign.container.LoadingPane")]</fx:Metadata>

    <fx:Script fb:purpose="styling">
        <![CDATA[         
            /**
             *  @private
             */
			
			[Embed(source="shinydesign/assets/GearsSmallMovie.swf")]
			public static const Gears:Class;
			
            override protected function updateDisplayList(unscaledWidth:Number, unscaledHeight:Number) : void
            {
                // Push backgroundColor and backgroundAlpha directly.
                // Handle undefined backgroundColor by hiding the background object.
                if (isNaN(getStyle("backgroundColor")))
                {
                    background.visible = false;
                }
                else
                {
                    background.visible = true;
                    bgFill.color = getStyle("backgroundColor");
                    bgFill.alpha = getStyle("backgroundAlpha");
                }
                
                super.updateDisplayList(unscaledWidth, unscaledHeight);
            }
        ]]>        
    </fx:Script>
    
    <s:states>
        <s:State name="normal" />
        <s:State name="disabled" />
		<s:State name="loading" />
		<s:State name="dataLoaded" />
		
    </s:states>
    
	
	<s:transitions>
			
		<s:Transition fromState="loading" toState="dataLoaded" >
			<s:Sequence>
				<s:Fade  target="{contentGroup}" startDelay="300"/>	
				<s:Fade  target="{loadingThrobber}" />				
			</s:Sequence>
		</s:Transition>
		
		<s:Transition fromState="*" toState="loading" >
			<s:Sequence>
				<s:Fade  target="{contentGroup}" startDelay="300"/>	
				<s:Fade  target="{loadingThrobber}" />				
			</s:Sequence>
		</s:Transition>
		
	</s:transitions>
	
    <!--- Defines the appearance of the SkinnableContainer class's background. -->
    <s:Rect id="background" left="0" right="0" top="0" bottom="0">
        <s:fill>
            <!--- @private -->
            <s:SolidColor id="bgFill" color="#FFFFFF"/>
        </s:fill>
    </s:Rect>
    
	<!--Throbber-->
	<s:VGroup horizontalAlign="center" id="loadingThrobber" verticalAlign="middle" height="{this.height}" includeIn="loading" left="5" right="5" alpha.dataLoaded="0" alpha.loading="1" >
		<s:Label id="LoadingLabel" fontSize="20" width="{this.parent.width}" textAlign="center" alpha.dataLoaded="0" alpha.loading="1"/>
		<s:SWFLoader source="{Gears}" width="100" height="100" id="loadingGraphic"  alpha.dataLoaded="0" alpha.loading="1" />
	</s:VGroup>
    <!--
        Note: setting the minimum size to 0 here so that changes to the host component's
        size will not be thwarted by this skin part's minimum size.   This is a compromise,
        more about it here: http://bugs.adobe.com/jira/browse/SDK-21143
    -->
    <!--- @copy spark.components.SkinnableContainer#contentGroup -->
    <s:Group id="contentGroup" alpha.loading="0" alpha.dataLoaded="1" left="0" right="0" top="0" bottom="0" minWidth="0" minHeight="0" includeIn="dataLoaded">
        <s:layout>
            <s:BasicLayout/>
        </s:layout>
    </s:Group>

</s:Skin>
